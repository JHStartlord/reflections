When would you want to use a remote repository rather than keeping all your work
local?

    To work with different people, to work alone on one project on diffent sites,
    to backup my local repository in the cloud.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If I work on same branch then someone else, I would have to merge every
	time a push was done by someone else. On the other hand, if I am a user
	of the content of the branch and not contirbuting, I would like to have
	the newest version always ready. Sometimes I rely as a user on the 
	current version and don't want any automatic changes, then I would
	prefer manual pulls.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork is a copy of a repository on github, which refers to the origin,
	but is completely on its own. No changes or whatsoever are transfered
	back to the original repository.
	A clone is a copy of a repository, changes can be pushed and pulled
	between the copy and the original source.
	A branch is done inside a repository. Normaly the leading branch is
	master. To changes things and test them befor releasing them to master
	one creates a branch to commit the changes he has done, till everything
	is ready for release to master. So a branch is a way to manage commits,
	it is not a copy of a complete repository, but a structuring mechanisim
	inside a repository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    When pushing or pulling, git does not have to check, what the local
	repositories state is, but can start from this point.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without git or github, I would send a collegue the information per mail
	to review. Later he would sent it back to me. That could be hard if the
	project gets bigger, also it would be hard to see the changes. I 
	would have to tell him excatly what changed and have a detailed log
	about it.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I work on master, if I am the main responsible for the project and I only
	have a small change, which does not need review or is safe to not break
	anything else.
	I would work on a branch, if I have a bigger feature to do, so I can 
	commit frequently, maybe go back to master, if it does not realy work out.
	Also, if mutliple people work on the same project adding features in 
	parallel, I would work on a branch.
